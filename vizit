#!/bin/bash

# Path to sarjitsu.conf
APP_CONF=conf/sarjitsu.conf

# From 'curl' man pages:
#  "Maximum time in seconds that you allow curl's connection to take.  
#   This only limits the connection phase, so if curl connects within
#   the given period it will continue - if not it will exit."
TIMEOUT=10

log(){
  echo -e "[$(date +'%D %H:%M:%S %Z')] - $*"
}

user_interrupt(){
  log "\nKeyboard Interrupt detected."
  exit 1
}

trap user_interrupt SIGINT

if [ ! -f $APP_CONF ]; then
  log "path: $APP_CONF ..does not exist."
  exit -1
fi

source $APP_CONF

usage(){
  echo "Usage: ./vizit [ options ] [ <datafile/dir path> ]"
  echo -e "\nDefault: $ ./vizit <sa01 path> <sa02 path> ..\n"
  echo "Options are:"
  echo -e "\t[-f path to a single SA binary file.]"
  echo -e "\t[-d path to directory with a bunch of SA binary files in it.]"
  echo -e "\t[-r path to pbench results dir. Recursively locates all sar.data]"
}

[ $# = 0 ] && {
  usage
  exit -1
}

while getopts "h?d:f:r:" opt; do
    case "$opt" in
      h|\?)
        usage
        exit 0
        ;;
      r) PBENCH_RESULTS_DIR=$OPTARG
        ;;
      d) UPLOAD_DIR=$OPTARG
        ;;
      f) FILE_PATH=$OPTARG
        ;;
    esac
done

upload_em_all(){
  CMD=''
  APP_URL=$BACKEND_HOST:$BACKEND_SERVER_PORT/$MIDDLEWARE_UPLOAD_ENDPOINT
  while IFS=  read -r line; do
    CMD+=" -F datafile=@$line"
  done < <(echo "$*")
  log "attempting to upload file(s) to $APP_URL now.."
  log "Current connection TIMEOUT value: $TIMEOUT seconds.."
  
  OUTPUT=$(curl --connect-timeout $TIMEOUT -s $CMD -F 'check_all=check_all' -F 'cmd_mode=True' $APP_URL)

  if [[ -z $OUTPUT ]]; then      
      CHECK_HOST=$(ping -c 1 $BACKEND_HOST | grep "1 received")
      if [[ -z $CHECK_HOST ]]; then
	  log "$APP_URL is down."
	  log "Check status of your BACKEND_HOST endpoint in conf/sarjitsu.conf"
	  exit 1
      else
	  log "$APP_URL is up and running, but for some reason, connection timed out. Try again?"
	  exit -1
      fi
  else
      log "Files uploaded successfully.."
  fi
  
  echo $OUTPUT | ./utils/vizit_results_parser.py
}

if [[ -z $FILE_PATH && -z $UPLOAD_DIR && -z $PBENCH_RESULTS_DIR ]]; then
  upload_em_all $*
else
  if [[ $UPLOAD_DIR ]]; then
    log "Directory mode selected.."
    upload_em_all "$(find "$UPLOAD_DIR" -maxdepth 1 -not -type d)"
  elif [[ $PBENCH_RESULTS_DIR ]]; then
    log "Pbench mode selected.."
    upload_em_all "$(find "$PBENCH_RESULTS_DIR" -name sar.data)"
  elif [[ $FILE_PATH ]]; then
    log "Single file mode selected.."
    upload_em_all "$FILE_PATH"
  fi
fi
